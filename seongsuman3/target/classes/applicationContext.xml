<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.2.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<context:component-scan base-package="com.mycompany.biz" />
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	
	<context:property-placeholder location="classpath:config/database.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>


	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
	
	
	<!-- Spring과 JPA 연동설정 -->
	<!-- 
		HibernateJpaVendorAdapter : JPA벤터지정...하이버네이트 사용
		LocalContainerEntityManagerFactoryBean : EntityManager객체 반환해주는 클래스
		
		Dialect클래스 - DBMS에 따라 달라지는 SQL을 해당하는 DBMS SQL로 최적화 시켜주는 역할을 한다.
			. Oracle	: OracleDialect
			. MySQL		: MySQLDialect
			. MSSQL		: SQLServerDialect
			. H2		: H2Dialect	
		
		hbm2ddl 방식지정
			. create	: 웹어플리케이션이 실행될떄 기존의 테이블을 삭제하고 다시 생성한다.
			. update	: 기존에 있는 테이블을 재사용한다.
		
	 -->
	
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter"></property>
		<property name="packagesToScan" value="com.mycompany.biz.board"></property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> <!-- MYSQL 쿼리 적용 생성 -->
				<prop key="hibernate.show_sql">true</prop>			<!-- 생성된 SQL을 콘솔에 출력 여부 -->
				<prop key="hibernate.format_sql">true</prop>		<!-- 출력할 때 정해진 폼으로 출력 -->
				<prop key="hibernate.use_sql_comments">true</prop>	<!-- SQL에 주석 포함 여부 -->
				<prop key="hibernate.id.new_generator_mappings">true</prop>	<!-- 새로운 키 생성 전략 사용 여부 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>	<!-- 중요: 테이블 생성, 수정, 삭제 DDL 처리 방식 -->
			</props>
		</property>
	</bean>
	
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager"> 
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager"> 
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>  
			<tx:method name="*" rollback-for="java.lang.Exception"/> 
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.mycompany.biz..*.*(..))"/>
		<aop:advisor  pointcut-ref="txPointcut"  advice-ref="txAdvice"/> 
	</aop:config>
	
	
	
	
 	<!-- AOP 설정 및 활용 -->
 	<bean id="beforeAdvicePrac" class="com.mycompany.biz.common.BeforeAdvicePrac"></bean>
	<bean id="afterAdvicePrac" class="com.mycompany.biz.common.AfterAdvicePrac"></bean>
	
	<!-- aop -->
  	<aop:config>
	    <aop:aspect ref="beforeAdvicePrac">
	        <aop:before method="beforeMethod" pointcut="execution(* com.mycompany.biz..*.*(..))"/>
	    </aop:aspect>
	    <aop:aspect ref="afterAdvicePrac">
	        <aop:after method="afterMethod" pointcut="execution(* com.mycompany.biz..*.*(..))"/>
	    </aop:aspect>
	</aop:config>
	

	
	
</beans>
